플러터를 소개합니다 

크로스플랫폼 니즈가 생기는 배경

안드, ios를 모두 혼자 개발하게 되는 상황  
1. 사이드 프젝 할 때
2. 두 팀을 모두 지휘해아 할 떄
3. 할사람이 나밖에 없을때

사실상 같은 코드를 두번 씀 (버그도 두배, 유지보수도 두배)

그래서 대 크로스 플랫폼 시대가 와버렸다. Ionic, flutter, RN, tamarin

* 참고로 플러터는 막내다.

Ionic: 앵귤러JS와 Cordova로 웹 만들듯이 앱을 만들자는 아이디어

1. os별로 다르게 보이는 경우가 있음
2. 웹뷰를 사용하기 때문에 성능면에서 다소 손해를 보게 됨
3. 기기의 기능을 사용하기 위해 별도의 라이브러리에 의지

RN: 웹뷰 대신 네이티브 브릿지를 사용하여 네이티브 위젯을 가져와 UI를 그리는 아이디어

1. 네이티브위젯이 os별로 다르기 때문에 os별로 모양이 다른 경우가 있음
2. 브릿지를 사용하기 때문에 네이티브보다는 성능에서 손해가 있음


플러터의 특징들

1. 스키아 엔진
    1. Made in c++ language
    2. 캔버스에 바로 그리는 방식
    3. 크롬 브라우저, 크롬os, 안드로이드, 플러터 등에서 사용
2. 네이티브급 탁월한 성능
    1. 플러터에서 모든 위젯을 직접 개발해둠
    2. 레거시 UI 시스템을 경유하지 않고 스키아 엔진을 통해 직접 캔버스에 그리는 방식
        1. 오래된 안드로이드같은 경우는 오히려 플러터로 개발하는게 더 빠를수도 있음!
3. 플랫폼을 가리지 않는 맹활약
    1. Canvas layer(drawing layer) 가 있는 대부분의 플랫폼에서 사용 가능
4. 어느 플랫폼에서나 완벽하게 같은 화면
    1. 스키아 엔진을 통해서 캔버스에 그리는 플러터의 방식을 통해, 픽셀 하나까지 완벽하게 동일한 뷰를 보장.
5. 그 외 플러터의 특징들
    1. Dart 언어로 만들어짐
    2. JIT와 AOT를 모두 사용해 빠른 개발과 준수한 성능 보장
    3. 구글에서 강력하게 서포트해줌
    4. 수만개 서드파티 라이브러리의 풍부한 생태계


멀티 플랫폼 시연
* Window
* Web
* Android
* iOS
* Mac OS
프로젝트 만들면 나오는 기본적인 예제를 각 os에 맞게 렌더링하는걸 보여주는 시간이였다.


GCP와 풍부한 연결
1. 다양한 구글 서비스들과 매우 긴밀하게 연결되어있어 구글 서비스들을 사용하기 쉬움(ex) 파베)


플러터와 파베로 채팅앱 만들기 시연

1. Firebase 서버 만들기
2. Hosting, firestore 오픈하기
3. Flutterfire config -> 내가 쓸 서버 고르기
4. Yaml 파일에 cloud_firestore, firebase_core 추가하기
5. main에 비동기 설정, Widgets 그거 추가하기
6. List<String> messages = [];
7. 컨트롤러 만들기
8. 코파일럿 어쩌고 쓰다보니까 만들어짐;;



Flutter, Theme 디자이너와 호감작하기 - 유병욱(쿠로곰)

컨텐츠
1. UnderStanding designers’ Languages
2. Flutter Theme
3. Design Guide
4. Material Design
5. Design System

여러분들께서는 디자이너와 어떻게 소통하시나요?

피그마, 젯플린, 스케치, Xd, ppt

Theme을 잘 쓴다면 무리한 디자인 요청도 생각보다 쉽게 가능하다.

폰트가 생각보다 중요함. 애플 폰트 기본체로 바꾸면 이게 뭐야 소리 나온다.

Look & feel

마케팅, 브랜딩 같은 분야와 제품에 내용에 쓰이는 용어


Flutter in Theme

Theme :애플리케이션 내에서 Look & feel 을 ‘특정 규칙’에 의해 일원화하여 관리 할 수 있는 디자이너와 친해지기 위한 가장 기본적인 객체


Design Guide

2.xx의 단점 : 120hz 지원이 안됐었는데 3.3 오면서 가능해졌다.


Material Design

Scaffold, Dialog ~ 등등

머티리얼 디자인 기반의 Theme 디자인이 잘 적용되어있다.

Material design Theme 데이터에는 굉장히 많은 요소가 있음!

하위 계층에 위젯에서 스타일을 일일히 지정해두면 만약 디자인이 바껴서 전체적인 앱 느낌이 바뀌었을때 바꿀때 귀찮아짐

색깔에 대한 통일감은 Theme에서 온다

PrimaryColor

colorScheme

미리 선언해두면 하위 위젯들에게도 전부 적용이 된다. 통일성, 코드작업 면에서 좋음



상태관리 할때 뭐 쓰시나요?

Bloc 쓰는 편

다른 개발자와 같이 개발할때 정형화된 Bloc을 쓰는게 제일 좋았던 것 같다.

근데 요즘은 리버팟 쓰는편

GetX는 잘 선호하지 않는다.

flutter의 이념이라고 할 수 있는 build context를 멸시하는 정도로 안쓰기 때문에

그래도 좋긴 좋아서 개인 프젝이나 빨리 해야하는 프젝에는 GetX를 사용하는 편이다.


오브젝트를 만들 때 컨테이너랑 사이즈박스랑 뭘 쓰나요?

쿠로곰님은 데코레이션과 컬러를 쓰냐 안쓰냐에 따라 컨테이나랑 사이즈 박스를 쓴다.

단순히 데코는 데코레이션 박스, 패딩은 패딩, 사이즈 박스는 높이랑 너비가 있을때

아무것도 없을떄는 사이즈드 쉬링크, 컨테이너는 모든 요소들을 합친 경우라 그럴떄는 컨테이너를 쓰는 편





Testing multiplatform

개발자와 테스팅
1. 개발자에게 테스팅이란?
2. 서비스 개발자와 블랙박스 테스팅
플러터 테스팅 소개

멀티 플랫폼에서 플러터 앱 테스트 하기

어플리케이션 테스팅의 미래




개발자에게 테스팅이란?

과제, 학습. 

해야하는건 알지만 그 시기가 다가오기 전까지는 하기 싫은것

훌륭한 소프트웨어의 기능은 복잡한 것을 간단하게 보이게 하는 것.

테스트에는 블랙박스와 화이트박스 테스팅이 있다.

블박 테스팅: 내부 구조 정보도 모르고 코드도 모르고 사용자 관점에서 테스트하는것

화이트박스 테스팅 : 정보와 코드, 개발자가 테스트하는것

블박 테스팅은 겉면을 보지만 화이트박스 테스팅은 코드퀄리티, 깔끔함, 속도 등을 본다.


플러터 테스팅 소개

모든 테스팅을 직접 하면 핫 리로드로도 모자라다.

귀찮으니까 테스트를 자동화하기 시작했다.

테스트 시나리오/ 스크립트를 작성하는 Dart_test와 Flutter_test,

테스트 동작을 수행해주는 Flutter_driver 라이브러리가 있다.


Well-tested app

유닛 테스트와 위젯 테스트가 코드 커버리지에 의하여 추적되며, 주요 사용 케이스가 인티그레이션 테스트로 검증된 어플리케이션.

신뢰성 : 해당 테스트 성공이 앱이 잘 개발되었는지 보장하는가?

비용 : 해당 테스트를 실행하기 위해 시간/인력/자본이 얼마나 소요되는가?

의존성 : 해당 테스트를 실행하기 위해서 외부 시스템 혹은 다른 객체에 의존해야 하는가?

실행 소요시간

Unit : 낮음 낮음 적음 빠름

Widget : 보통 보통 보통 빠름

Integration : 높음 높음 많음 느림



유닛 테스팅 : 프로그램에서 가장 작은 부분 메소드, 클래스를 테스트

주요 패키지 :  test(dart-test)

왜 Mock을 사용하는가?

* 라이브 서버를 사용하는 테스트는 테스트 속도를 느리게 함
* 네트워크를 통해 연결된 db 혹은 웹서비스는 불안정적일 수 있음.. 이 경우 테스트는 불안정해질 수 있고 이를 flaky test 라고 함
* 프론트 탓이 아닐수 있기 때문에


위젯 테스팅

* 위젯의 동작을 확인하는 작업
* Ex) 위젯에 입력 신호 보낸 후 위젯 동작 확인
* Ex) 위젯 트리에서 특정 위젯 찾기
* Ex) 위젯이 특정 value 를 잘 나타내는지 등


1. 테스트할 위젯 작성

2. testWidgets 테스트 작성

3. Finder를 사용하여 위젯 검색

4. 탐색된 위젯과 상호작용



Integration Testing : 실기기와도 상호작용하는 테스트



멀티플랫폼에서 flutter 앱 테스트 하기

뷰에서 위쪽은 플러터 뷰를 쓰는데 아래쪽은 안드로이드 뷰를 써야할 일이 생길때가 있다.


* 조직에서 사용하던 sdk 혹은 모듈 기타 요소들이 강제되는 경우
* 플러터에서 해당 기능을 지원하지 않는 경우(네이티브 기능)
* 웹뷰를 사용해 외부 서비스를 이용하는 경우


에스프레소

* 안드에서 사용되는 UI 테스팅 자동화 도구
* 에스프레소 플러터 라이브러리로 플러터와 통합됨.
* 안드 앱에서 플러터 앱의 요소를 테스트하고자 하는 경우



어플리케이션 테스팅의 미래

Q: 자동 테스트 어때요?
A:수통 테스트보단 좋지만 아직 귀찮다.

AI 테스팅
이미지 인식 AI를 사용해서(이 위젯이 버튼일 확률, 사진일 확률를 계산) 테스팅을 자동으로 돌린다.

내년 3월 초에 플러터 해커톤이 있을듯??




최신 플러터 데스크탑 돞아보기 - 박제창

2022 로드맵 데스크탑

2022년의 플러터 팀의 전략은 데스크톱의 퀄리티를 높이는 것

18년도 12월 팀 스미스가 슬라이드를 플러터 데스크탑으로 발표함

2020년 데스크탑 프리뷰

2022년 2월 4일 윈도우 출시, 맥 리눅스 베타

2022년 5월 리눅스 맥 출시

2022년 8월 3.3

플러터 팀은 이미 올해 목표를 달성했다.

그 외 자잘한 기능들을 유지보수하며 개선해나가는중


맥 os 점유율이 낮음, 15~16%

윈도우가 높다. 리눅스는 거의 없음

우리나라에서 윈도우 사용자는 89%

모바일 환경 스마트폰 사용자가 pc 사용자를 넘어설 정도로 모바일 사용자 수는 상당하다

예전에는 데탑앱을 많이 만들었지만 이제는 모바일/웹으로도 다 가능한 시대

* 그러면 PC앱을 왜만드냐?   
하지만 산업현장이나 임베 및 특수한 경우에는 데탑앱이 필요함

데탑앱의 과제: 무엇을 데탑앱으로 만들것인가? 단순한 유틸리티 프로그램을 넘어서..

플러터 프로젝트 데스크탑 하번 찾아볼 것

무슨 이슈가 있는지 볼 수 있음


2. WIndow 데스크탑
	

윈도우 데탑을 개발할 때

비주얼 스튜디오, c++

c++을 사용한 데스크톱 개발 클릭

이래야 에러가 안남

Fluent UI 사용해보기 - 어느정도 검증됨


개발자는 패키지 사용을 두려워하지 말아야 한다

보이면 써라

share_plus 

배포하기 misx

 bitsdojo_window


맥에서 윈도우 사용하기

1. 버츄얼박스, UTM 등 원하는 가상화 도구를 설치한다
2. 윈도우 이미지를 다운로드받아 실행한다
3. Flutter 설치한다
4. 비주얼 스튜디오를 설치한다
5. 데탑만 빌드할거면 vsc 사용해도 괜찮다
6. Flutter doctor로 설치상태를 확인하기


3. Mac OS

맥 데탑을 빌드하고 사용할때는 Xcode, 코코아팟이 필요함

macOS 10.11, 10.12 지원 중단? What?

13도 중단?

OpenGL이 문제 + 10.13은 사용자가 적다 1%?

예전 맥북은 지원하지 않음

macos_ui 커스텀ㄱㄴ

맥은 메뉴바 지원



4. 리눅스

라즈베리파이, 엔비디아, 도요타, 소니 에서 리눅스 데탑 씀

리눅스에서 필요한 패키지

Clang, cmake, 기타 등등

소니는 임베디드 리눅스

삼성은 플러터 tizen

리눅스에서 vscode 받을때 arm용으로 다운받기

리눅스 데탑에 맥, 윈도우 ui를 적용시킬 수 있따


패키지 사용을 두려워하지 말라고 하셨는데 몰라도 일단 써보는게 중요한가요?

ㅇㅇ 일단 써보셈 좋음

에러는 써보고 니가 고쳐라
